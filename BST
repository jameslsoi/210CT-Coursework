class Node(object):
    def __init__(self, val):
        self.value = val
        self.left = None
        self.right = None

    def insert(self, data):
        if self.value == data:          # check if there is already data in the node,if there it return false
            return False
        elif self.value > data:                 # less than current node
            if self.left:                       #look down the left side, check if there is a left child
                return self.left.insert(data)   # if if there is a left child, insert data into left child
            else:
                self.left = Node(data)          # if not make a new left child and add the data
                return True
        else:
            if self.right:
                return self.right.insert(data)
            else:
                self.right = Node(data)
                return True

    def find(self, data):
        if self.value == data:
            return True
        elif self.value > data:
            if self.left:
                return self.left.find(data)
            else:
                return False

        else:
            if self.right:
                return self.right.find(data)
            else:
                return False

    def preorder(self):
        if self:
            print (str(self.value))
            if self.left:
                self.left.preorder()
            if self.right:
                self.right.preorder()

    def postorder(self):
        if self:
            if self.left:
                self.left.postorder()
            if self.right:
                self.right.postorder()
            print (str(self.value))
            
    def inordeer(self):
        if self:
            if self.left:
                self.left.inorder()
        print(str (self.value))
            if self.right:
                self.right.inorder()

class Tree:
    def __init__(self):
        self.root = none


    def insert (self, data):
        if self.root:
            return self.root.insert(data)
        else:
            self.root = Node (data)

    def find (self, data):
        if self.root:
            return self.root.find(data) # if a root exists then find the data that it has
        else:
            return False

    def preorder(self):
        print ("Preorder: ")
        self.root.preorder

    def postorder(self):
        print ("Postorder: ")
        self.root.postorder

    def inorder(self):
        self.root.inorder
