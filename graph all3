class Vertex (object):
    def __init__(self, name):
        self.name = name
        self.adj = sorted (list())

    def add_adj(self, vert2):
        if vert2 not in self.adj:
            self.adj.append(vert2)

class Graph(object):

    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if isinstance(vertex, Vertex) and vertex.name not in self.vertices:
            self.vertices[vertex.name] = vertex


    '''def add_edge(self, vert1, vert2):
        if vert1 in self.vertices and vert2 in self.vertices:
            self.vertices[vert1].add_adj(vert2)
            self.vertices[vert2].add_adj(vert1)
        else:
            self.add_vertex(vert1)
            self.add_vertex(vert2)'''

    def add_edge(self, vert1, vert2):
        if vert1 in self.vertices and vert2 in self.vertices:
            for key, value in self.vertices.items():
                if key == vert1:
                    value.add_adj(vert2)
                if key == vert2:
                    value.add_adj(vert1)

    def display(self):
        for key in sorted (list (self.vertices.keys())):
            print (key + str(self.vertices[key].adj))

    def dfs(self, vertex):
        stack = [vertex]
        visited = []

        while stack:
            vert1 = stack.pop(0)


            if vert1 not in visited:
                visited.append(vert1)

                for vert2 in vert1.adj:
                    vert2 = self.vertices[vert2]
                    if vert2 not in visited:
                        stack.append(vert2)



        print(visited)






if __name__ == '__main__':
    g = Graph()
    # print(str(len(g.vertices)))
    a = Vertex('A')
    g.add_vertex(a)
    g.add_vertex(Vertex('B'))
    for i in range(ord('A'), ord('J')):
        g.add_vertex(Vertex(chr(i)))

    edges = ['AB', 'AI','IC', 'IG', 'CD', 'CE', 'CF', 'EH', 'GH']
    for edge in edges:
        g.add_edge(edge[:1], edge[1:])

    g.dfs(g.vertices['A'])

