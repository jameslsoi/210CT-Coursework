class Node(object):
    def __init__(self, value):
        self.value=value
        self.next=None
        self.prev=None
 
class List(object):

    def __init__(self):
        self.head=None
        self.tail=None

    def insert(self, node, x):
          #Not actually perfect: how do we prepend to an existing list?
        if node != None:
            x.next = node.next
            node.next = x
            x.prev = node


            if x.next!=None:
                x.next.prev=x

        if self.head == None:
            self.head = self.tail = x
            x.prev = x.next =None

        elif self.tail == node:
            self.tail = x

    '''
        delete a node
        let current be the root/start/head of the list
        found = false

        while the node you are looking for is not found - iterate
        if current.value == to the node you want to delete
            found = True - end
            else:
            
    '''
    def delete (self, node):
        current = self.head
        found = False

        while not found:
            if current.value == node.value:
                found = True
            else:
                current.prev = current
                current = current.next

        if current.prev == None:
            self.head = current.next
        else:
            current.prev.next = current.next




    def display(self):
        values = []
        node = self.head
        while node != None:
            values.append(str(node.value))
            node = node.next
        print ( "List: ",','.join(values))


if __name__ == '__main__':

    l=List()

    l.insert(None, Node(4))
    l.insert(l.head,Node(6))
    l.insert(l.head,Node(8))
    l.insert(l.head,Node(10))
    l.display()
    l.delete(Node(4))
    l.display()



