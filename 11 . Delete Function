'''Doubly linked list with delete node implemented
create an object called Node
    give it the attributes of have a value and 2 nodes  attached to it (prev, next)

'''
class Node (object):

    def __init__(self, value, n =None, p =None):
        self.value = value
        self.next_node = n
        self.prev_node = p


    def get_next(self):
        return self.next_node

    def set_next(self, n):
        self.next_node = n

    def get_prev (self):
        return self.prev_node

    def set_prev (self, p):
        self.prev_node = p


    def get_value (self):
        return self.value

    def set_value(self):
        self.value = value


class linked_list(object):

    def __init__(self, r= None):
        self.root = r                   #start of linked list
'''insert function
new nodes will be object Node with a value
if no root then make one
if root then just add the new_node to so that it points to the current root, and then set the root to be the new node
'''
    def insert(self, value):
        new_node = Node( value, self.root)
        if self.root:
            self.root.set_prev(new_node)
        self.root = new_node
'''Remove function
start at the root
find the node taht you want to delete
set pointer of prev node to the node next to what you want to delete

'''

    def remove (self, value):
        current_node = self.root

        while current_node:
            if current_node.get_value() == value:
                next = current_node.get_next()
                prev = current_node.get_prev()

                if next:
                    next.set_prev(prev)

                if prev:
                    prev.set_next(next)

                else:
                    self.root = current_node
                return current_node
            else:
                current_node = current_node.get_next()

    def display(self):
        lists = []
        y = self.root
        while y != None:
            lists.append(str(y.value))
            y = y.get_next()

        print ("List: ",",".join(lists))

if __name__ == '__main__':


    myList = linked_list()
    myList.insert(2)
    myList.insert(3)
    myList.insert(1)
    myList.insert(7)

    myList.display()
    myList.remove(3)
    myList.display()

